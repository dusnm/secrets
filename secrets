#!/bin/bash

RECEPIENT_ARR=()
CHOSEN_RECEPIENT=""
OS=""

function print_help() {
    usage="
Simplify the encryption and decryption of text messages with GPG

Copyright (C) 2023 <dusan@dusanmitrovic.xyz>
Licensed under the terms of the GNU GPLv3 or, at your option, any later version

Usage: $(basename "$0") [OPTIONS] [ARGUMENT]

Options:
  -e [secret string] Whatever is passed to this option will be encrypted
  -i [file] Same as e, but uses a file as input instead
  -d [file] Decrypt a message encrypted by this utility
  -o Save the encrypted output as a file
  -c Copy the encrypted output to clipboard
  -h Print this help message
"
    echo "$usage"
}

function determine_os() {
    param="$(uname -s)"
    case "$param" in
	"Darwin")
	    OS="$param"
	    ;;
	"Linux")
	    OS="$param"
	    ;;
	*)
	    echo "Unsupported OS"
	    exit 1
	    ;;
    esac
}

function check_deps() {
    deps="gpg xxd"
    case "$OS" in
	"Darwin")
	    deps="$deps pbcopy grealpath"
	    ;;
	"Linux")
	    deps="$deps xclip"
	    ;;
    esac

    for dep in $deps;
    do
	if [ "$(command -v "$dep" | wc -l)" -eq 0 ]; then
	    echo "Missing dependency: $dep"
	    exit 1
	fi
    done
}

function list_recepients() {
    recepients="$(gpg --with-colons --list-keys | cut -d ':' -f10 | grep -o '<[^>]*>' | sed -e "s/<//g" -e "s/>//g")"

    counter=0
    while read -r recepient;
    do
	echo "$counter $recepient"

	RECEPIENT_ARR+=("$recepient")
	((counter++))
    done <<< "$recepients"
}

function read_input() {
    read -p "Please select a recepient by typing the number in front of the correct email address." choice
    echo ""

    if [ "$choice" -lt 0 ]; then
	echo "Your choice must be a non-negative integer"
	exit 1
    fi

    count="${#RECEPIENT_ARR[@]}"
    ((--count))

    if [ "$choice" -gt "$count" ]; then
	echo "Your choice cannot be greater than the number of available recepients."
	exit 1
    fi

    CHOSEN_RECEPIENT="${RECEPIENT_ARR["$choice"]}"
}

function encrypt_data() {
    output_filename="$(xxd -l 10 -p /dev/urandom).gpg"
    message="$(echo "$1" | gpg -r "$CHOSEN_RECEPIENT" -e --sign --armor)"

    if [ "$FLAG_OUTPUT_FILE" -eq 1 ]; then
	echo "$message" > "$output_filename" && \
    	echo "Message saved as: $output_filename"
    fi

    if [ "$FLAG_CLIPBOARD" -eq 1 ]; then
        case "$OS" in
	    "Darwin")
	        echo "$message" | pbcopy
	        ;;
	    "Linux")
	        echo "$message" | xclip -selection clipboard
		;;
        esac

        echo "The message is copied to your clipboard."
    fi
}

function decrypt_data() {
    echo "$1" | gpg --quiet --decrypt
}

determine_os
check_deps

FLAG_ENCRYPT=0
FLAG_ENCRYPT_WITH_INPUT_FILE=0
FLAG_DECRYPT=0
FLAG_CLIPBOARD=0
FLAG_OUTPUT_FILE=0
INPUT_FILE=""
MESSAGE=""

while getopts "e:i:od:ch" option;
do
    case "$option" in
	"e")
	    FLAG_ENCRYPT=1
	    MESSAGE="$OPTARG"
	    ;;
	"i")
	    FLAG_ENCRYPT_WITH_INPUT_FILE=1
	    case "$OS" in
		"Darwin")
		    INPUT_FILE="$(grealpath "$OPTARG")"
		    ;;
		"Linux")
		    INPUT_FILE="$(realpath "$OPTARG")"
		    ;;
	    esac
	    ;;
	"o")
	    FLAG_OUTPUT_FILE=1
	    ;;
	"d")
	    FLAG_DECRYPT=1
	    case "$OS" in
		"Darwin")
		    INPUT_FILE="$(grealpath "$OPTARG")"
		    ;;
		"Linux")
		    INPUT_FILE="$(realpath "$OPTARG")"
		    ;;
	    esac
	    ;;
	"c")
	    FLAG_CLIPBOARD=1
	    ;;
	"h")
	    print_help
	    ;;
	*)
	    print_help
	    exit 1
	    ;;
    esac
done

if [[ ("$FLAG_ENCRYPT" -eq 1 || "$FLAG_ENCRYPT_WITH_INPUT_FILE" -eq 1) && "$FLAG_DECRYPT" -eq 1 ]]; then
    echo "The e or i and d options cannot be used at the same time."
    exit 1
fi

if [[ "$FLAG_ENCRYPT" -eq 1 && "$FLAG_ENCRYPT_WITH_INPUT_FILE" -eq 1 ]]; then
    echo "The i and e options cannot be used at the same time."
    exit 1
fi

if [ "$FLAG_ENCRYPT" -eq 1 ]; then
	list_recepients
	read_input
	encrypt_data "$MESSAGE"
fi

if [ "$FLAG_ENCRYPT_WITH_INPUT_FILE" -eq 1 ]; then
    message="$(cat "$INPUT_FILE")"

    list_recepients
    read_input
    encrypt_data "$message"
fi

if [ "$FLAG_DECRYPT" -eq 1 ]; then
    ciphertext="$(cat "$INPUT_FILE")"
    decrypt_data "$ciphertext"
fi
